import java.util.Scanner;
import java.util.Stack;

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

public class rpTranslator {
	
	/**
	 *  @author xun007
	 *  @team rni006 
	 *
	 */

	/*
	 * Main method with reading reverse polish notation and sending it in, in
	 * convert method
	 */
	public static void main(String[] args) {
		StdOut.println("Enter reverse polish notation: ");
		String reversePolish = StdIn.readLine();
		StringBuilder reverseText = new StringBuilder(convert(reversePolish));
		StdOut.println("Infix: " + reverseText.reverse());
	}

	/*
	 * Method that contains all operators used in the converting which checks if
	 * char c is an operator or not
	 */
	private static boolean isOperator(String c) {
		if (c.equals("+") || c.equals("-") || c.equals("*") || c.equals("/") || c.equals("^"))
			return true;
		return false;
	}

	/*
	 * Method that convert the string to a stack with the strings to infix
	 */
	public static String convert(String c) {
		Stack<String> reversePolishStack = new Stack<>();
		String[] sendIt = c.split("\\s+");

		for (int i = 0; i < sendIt.length; i++) {

			if (isOperator(sendIt[i])) {

				String a = reversePolishStack.pop();
				String b = reversePolishStack.pop();

				reversePolishStack.push(")" + a + sendIt[i] + b + "(");
			} else
				reversePolishStack.push(sendIt[i]);

		}

		return reversePolishStack.pop();

	}

}